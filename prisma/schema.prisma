// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  // O arquivo .env será ignorado no ambiente produtivo,pois serve apenas para desenvolvimento
  // url      = env("DATABASE_URL")
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Criação de tabelas/models/entidades no Prisma
model User {
  // Chave/campo da tabela com nome 'id' do tipo 'Int' com uma anotação '@id' indicando que este é o identificador da tabela, ou seja, a sua chave primária e com um valor '@default' que será criado e incrementado automaticamente
  id Int @id @default(autoincrement()) 
  name String
  // Validação com '@unique' para que o 'username' seja único, ou seja, não pode haver mais de um usuário com o mesmo username
  username String @unique
  avatar String
  // Mapear posts que o usuário pode ter, ou seja, o usuário possui um ou mais posts. Isso é um relacionamento entre tabelas (User x Post)
  Post Post[]
  comments Comment[]

}

model Post {
  id Int @id @default(autoincrement())
  cover String
  title String
  slug String @unique
  body String
  markdown String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Esse campo 'authorId' será igual ao campo de 'id' da tabela de User
  authorId Int
  // Anotação '@relation' serve para explicar como que a tabela Post se relaciona com a tabela User: o campo contido em 'fields' (dentro da tabela de Post) fará referência ao campo contido em 'references' (dentro da tabela de User)
  author User @relation(fields: [authorId], references: [id])
  comments Comment[]
  likes Int @default(0) // Por padrão um post terá 0 likes
}

model Comment {
  id Int @id @default(autoincrement())
  text String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId Int
  author User @relation(fields: [authorId], references: [id])
  postId Int
  post Post @relation(fields: [postId], references: [id])
  // Modelagem de dados para representar o cenário em que há um comentário de um outro comentário
  parentId Int? // Comentário pai que pode ou não ter outros comentários que estão apontando para ele
  parent Comment?  @relation("CommentChildren", fields: [parentId], references: [id])
  // Autorelacionamento: É um relacionamento com ele mesmo, isto é, um comentário pode ter vários filhos (vários comentários apontando pra ele) ou ele mesmo pode apontar para um outro comentário pai
  children Comment[] @relation("CommentChildren")
}

// Primeira migration para criação das tabelas: $ npx prisma migrate dev --name init

// Migration: Configurar e traduzir os modelos/tabelas criados nesse arquivo para uma linguagem que o Postgres entenda e consiga manipular essas informações, ou seja, irá fazer a conexão com o banco de dados para criar essas tabelas/modelos dentro dele. Isso quer dizer que o desenvolvedor não irá manusear o Postgres diretamente, pois isso será feito pelo Prisma (tanto a criação quanto a manipulação dos dados). Em outras palavras, o Prisma faz a tradução do código JavaScript para instruções SQL.

// Geração do Prisma cliente para conectar o NextJS no PostgreSQL utilizando o Prima. Essa geração deve ser feita/refeita sempre que houver alguma alteração no banco de dados: $ npx prisma generate

